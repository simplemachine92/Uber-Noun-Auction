// deploy/00_deploy_your_contract.js

const { ethers } = require("hardhat");
const { head } = require("ramda");
const fs = require("fs");

const localChainId = "31337";

module.exports = async ({ getNamedAccounts, deployments, getChainId }) => {
  const { deploy } = deployments;
  const { deployer } = await getNamedAccounts();
  const chainId = await getChainId();

  let devBody =
    "0x0016171f090e020502020301020103050205020103010202030502020201000b020202010001020203010201030102010304020202010001020203010203030402020201000b0202020100020202030102010305020202010002020103010202030502020201000b02";
  let devCessory =
    "0x00011f1e010f0001040e000e000104010001050d000f0001040e001e001c0001060100020001071900010801000200010918000106010001060107010a01000207170001080100020001071900010b01001a00010603001e001e001e001e001e00180001070500170001070100010a04001800010a0500010001061c00010b0100010601081a00010001061c001e001e001e001e001e00030001041a00020001040100010417000106010003000104170001060100010603000104180001080100";
  let devHead =
    "0x000216140a010c0b00010c0b00010c0b00010c020006020200010c010c010008020100010c010c0a02010c010c0a02010c0c020c020c020c020c020c020c0201000a0201000100010d020e010d030e010d010e010d01000100020d030e010d030e010d010001000102090f010001000a020100";
  let devGlasses =
    "0x0009170e0703000610010006100300011002020201011001000110020202010110041002020201031002020201011001100200011002020201011001000110020202010110011102000110020202010110010001100202020101100300061001000610";

  let devBackground = "cce5ff";

  let parts1 = [devBody, devCessory, devHead, devGlasses];

  let punkBody =
    "0x0016171f09030201030a040302020309040802060401050102010001020203040204040105010201000102010305020404010501020100020201030102020302020106010401060205010001020103020201030102010301020106010401060107010501000202010301020103010201030102010401060104020701000802030401080107010009020204";
  let punkCessory =
    "0x00051f1e011c00010901000200010a1900010901000200010a1800010901000109020a0100020a1700010901000200010a1900010901001a00010903001e001e001e001e001e0018000106050017000106010001060400180001060500010001061c000106010002061a00010001061c001e001e001e001e001e00030001091a0002000109010001091700010a0100030001091700010a0100010a030001091800010a0100";
  let punkHead =
    "0x00011614070100030b0400010a01090500050b0400010a010902000109010a0100030b070001060109010a01000200010b01030100010a01090200010a010901060300030001030200010a01060200010a0106010a010001030200020b01090106010001060109020001060109010a01030200020b01020106010c0106010c010601090106010c01020103030001030a02010303000c0203000c0203000c0203000c0203000c0203000c0203000c0204000a020100040001090206010903060109010601090100040002090306010903060109010004000102090a010004000a020100";
  let punkGlasses =
    "0x0009170e0703000606010006060300010602020201010601000106020202010106040602020201030602020201010601060200010602020201010601000106020202010106010602000106020202010106010001060202020101060300060601000606";

  let pParts = [punkBody, punkCessory, punkHead, punkGlasses];

  let pBackground = "cfe9e8";

  //3
  let sBody =
    "0x0016171f09040202030404020302020602020301040103040207020203050202020100050201030502020201000402010501030502020201000502010305020202010004020105010305020202010005020103050202020100040201050103050202020100050201030502";
  let sCessory =
    "0x00011f1f010300010601080106030001070108010603000107010801060300010601080107030001060108010903000107010801090400010801060300010a0108010603000107010801060300010a0108010903000106010801090400010801090300010601080106030001090108010703000109010801060300010701080106040001080107030001090108010a030001060108010a030001070108010a0300010701080109040001080109090001060108010603000107010801070300010601080109040001090a00010701060109030001070108010603000109010801061500010a0108010a03000106010801091500010901080109030001090108010915000109010801060300010a010801060f000106010901070300010a010801060300010a02060f0001060108010903000107010a0109150001070108010606001500010a0108010606001500010601080106060003000109010601090f000109010801090300010602090300010601080106030001060b0001060108010903000106010801060300010701080106030001090b0001060108010603000106010801060300010901080106030001070b0001090108010a0300010a010801090300010601080106030001090b000107010801090300010601080109030001090108010a030001060b0001090108010a030001060108010a03000106010801060300010601080107030001070108010603000109010801090300010901080106030001060108010710000108010703000109010801090300010a0108010610000108010903000107010801060300010601080107100002090300010701080107030001060108010715000107010801060300010601080107150001070108010603000109010801071500010a0108010a0300010601080106040001060b0001070106030001090108010603000206010a040001080b00010801090300010a010601090a0001080b000108010906000a0001080b00010801090600";
  let sHead =
    "0x000216140a010b0b00010b0b00010b0b00010b020006020200010b010b010008020100010b010b0a02010b010b0a02010b0c020c020c020c020c020c020c0201000a0201000100010c020d010c030d010c010d010c01000100020c030d010c030d010c010001000102090e010001000a020100";
  let sGlasses =
    "0x0009170e070300060b0100060b0300010b02020201010b0100010b02020201010b040b02020201030b02020201010b010b0200010b02020201010b0100010b02020201010b010b0200010b02020201010b0100010b02020201010b0300060b0100060b";

  let sParts = [sBody, sCessory, sHead, sGlasses];

  let sBackground = "b7c3d6";

  //4
  let aBody =
    "0x000e171f0108020e00020301020203010202030e00010302020103020202030e00020301020203010202030e0008020e00030001041200030001041200030001040102110003000104020203000d0203000402020005020105020605020400040201000302020403050204030205000802050402020104010206000e02010401020700030201000102010601020306030202040800010202000106030201060102020603020b00010601020106010201060102010604020b00010202060302020603020b000b02";
  let aCessory =
    "0x00011f1e010f0001070e000e000107010001080d000f0001070e001e001c00010901000200010a1900010b01000200010c1800010901000109010a010d0100020a1700010b01000200010a1900010e01001a00010903001e001e001e001e001e001800010a05001700010a0100010d04001800010d05001e001e001e001e001e001e001e001e00030001071a000200010701000107170001090100030001071700010901000109030001071800010b0100";
  let aHead =
    "0x000216140a01040b0001040b0001040b00010402000602020001040104010008020100010401040a02010401040a0201040c020c020c020c020c020c020c0201000a02010001000106020f0106030f0106010f0106010001000206030f0106030f01060100010001020905010001000a020100";
  let aGlasses =
    "0x0009170e0703000610010006100300011002020201011001000110020202010110041002020201031002020201011001100200011002020201011001000110020202010110011002000110020202010110010001100202020101100300061001000610";

  let aParts = [aBody, aCessory, aHead, aGlasses];

  let aBackground = "ded7ff";

  let body =
    "0x0016171f0905020903030203030104020505030202020302060304020603030102010603000506020001060103010201060a000106010302060a000206020501000102010602030200010201030106020301020103010001020106020302000102010301060203010201030100010202060103020001020103010602030102010301000106010401050106020003060203";
  let accessory =
    "0x00011f1e010f0001060e000e000106010001060d000f0001060e001e001c000108010002000106190001080100020001061800010801000108020601000206170001080100020001061900010801001a00010803001e001e001e001e001e0018000102050017000102010001020400180001020500010001021c000102010002021a00010001021c001e001e001e001e001e00030001081a00020001080100010817000106010003000108170001060100010603000108180001060100";
  let head =
    "0x000216140a01060b0001060b0001060b00010602000502010302000106010601000402040301000106010604020603010601060302070301060302090302020a0301020b0301020b0301020b0302020a03030209030100020208030100010001050206010503060105010601050100010002050306010503060105010001000102090401000100040206030100";
  let glasses =
    "0x0009170e0703000606010006060300010602070201010601000106020702010106040602070201030602070201010601060200010602070201010601000106020702010106010602000106020702010106010001060207020101060300060601000606";

  let parts = [body, accessory, head, glasses];

  let background = "b294ed";

  await deploy("GTC_UBER_NOUNS", {
    // Learn more about args here: https://www.npmjs.com/package/hardhat-deploy#deploymentsdeploy
    from: deployer,
    // prettier-ignore
    args: [parts1,
    pParts,
    sParts,
    aParts,
    devBackground,
    pBackground,
    sBackground,
    aBackground
  ],
    log: true,
  });

  /* uLength = body.length + accessory.length + head.length + glasses.length;
  aLength = aBody.length + aCessory.length + aHead.length + aGlasses.length;
  dLength =
    devBody.length + devCessory.length + devHead.length + devGlasses.length;
  sLength = sBody.length + sCessory.length + sHead.length + sGlasses.length;
  pLength =
    punkBody.length + punkCessory.length + punkHead.length + punkGlasses.length;

  console.log(uLength + aLength + dLength + sLength + pLength); */

  // Getting a previously deployed contract
  const YourContract = await ethers.getContract("GTC_UBER_NOUNS", deployer);
  /*  await YourContract.setPurpose("Hello");
  
    To take ownership of yourContract using the ownable library uncomment next line and add the 
    address you want to be the owner. 
    // yourContract.transferOwnership(YOUR_ADDRESS_HERE);

    //const yourContract = await ethers.getContractAt('YourContract', "0xaAC799eC2d00C013f1F11c37E654e59B0429DF6A") //<-- if you want to instantiate a version of a contract at a specific address!
  */

  /*
  //If you want to send value to an address from the deployer
  const deployerWallet = ethers.provider.getSigner()
  await deployerWallet.sendTransaction({
    to: "0x34aA3F359A9D614239015126635CE7732c18fDF3",
    value: ethers.utils.parseEther("0.001")
  })
  */

  /*
  //If you want to send some ETH to a contract on deploy (make your constructor payable!)
  const yourContract = await deploy("YourContract", [], {
  value: ethers.utils.parseEther("0.05")
  });
  */

  /*
  //If you want to link a library into your contract:
  // reference: https://github.com/austintgriffith/scaffold-eth/blob/using-libraries-example/packages/hardhat/scripts/deploy.js#L19
  const yourContract = await deploy("YourContract", [], {}, {
   LibraryName: **LibraryAddress**
  });
  */

  // Verify your contracts with Etherscan
  // You don't want to verify on localhost
  /* if (chainId !== localChainId) {
    await run("verify:verify", {
      address: YourContract.address,
      contract: "contracts/YourContract.sol:YourContract",
      contractArguments: [],
    });
  } */
};
module.exports.tags = ["YourContract"];
